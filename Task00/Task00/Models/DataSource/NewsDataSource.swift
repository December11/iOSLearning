//
//  NewsDataSource.swift
//  Task00
//
//  Created by üë©üèª‚Äçüé® üì± december11 on 18.06.2022.
//

import UIKit

struct NewsDataResponse {
    let type: String
    let header: String?
    let imageURL: String?
    let title: String?
    let backgroundHexColor: String?
    let descriptions: [String]
}

final class NewsDataSource: DataSourceReadable {

    var currentScreenItems: [DecodableModel] = []
    
    private(set) var loadedResponseModels: [NewsDataResponse] {
        didSet {
            currentScreenItems = makeScreenItems(from: [oldValue])
        }
    }

    init() {
        loadedResponseModels = calculateRandomResponse()
        currentScreenItems = makeScreenItems(from: [loadedResponseModels])
    }

    func item(at index: Int) -> DecodableModel? {
        guard index >= 0 && index < currentScreenItems.count else { return nil }
        return currentScreenItems[index]
    }

    func refreshScreenItems() {
        loadedResponseModels = calculateRandomResponse()
    }

    func makeScreenItems(from responseData: [[NewsDataResponse]]) -> [DecodableModel] {
        var models: [DecodableModel] = []
        responseData.forEach { newsDataResponses in
            newsDataResponses.forEach { response in
                switch (response.type) {
                case "header":
                    guard let header = response.header else { return }
                    models.append(HeaderViewModel(header: header))
                case "detail":
                    models.append(DetailViewModel(title: response.title ?? "", descriptions: response.descriptions))
                case "backgroundColoredSpace":
                    guard
                        let hexString = response.backgroundHexColor,
                        let color = UIColor(hexString: hexString)
                    else { return }
                    models.append(BackgroundSpaceViewModel(color: color))
                case "image":
                    guard
                        let urlString = response.imageURL,
                        urlString.isURLVerified,
                        let url = URL(string: urlString)
                    else { return }
                    models.append(ImageViewModel(url: url))
                case "unknown":
                    return
                default:
                    return
                }
            }
        }
        return models
    }
}

final class BeautifulDataSource: DataSourceReadable {

    var currentScreenItems: [DecodableModel] = []
    
    private var loadedResponseModels: [NewsDataResponse] {
        didSet {
            currentScreenItems = makeScreenItems(from: [oldValue])
        }
    }

    init() {
        loadedResponseModels = calculateRandomResponse()
        currentScreenItems = makeScreenItems(from: [loadedResponseModels])
    }

    func item(at index: Int) -> DecodableModel? {
        guard index >= 0 && index < currentScreenItems.count else { return nil }
        return currentScreenItems[index]
    }

    func refreshScreenItems() {
        loadedResponseModels = calculateRandomResponse()
    }

    func makeScreenItems(from responseData: [[NewsDataResponse]]) -> [DecodableModel] {
        var models: [DecodableModel] = []
        responseData.forEach { newsDataResponses in
            newsDataResponses.forEach { response in
                switch (response.type) {
                case "header":
                    guard let header = response.header else { return }
                    models.append(HeaderViewModel(header: header))
                case "detail":
                    models.append(DetailViewModel(title: response.title ?? "", descriptions: response.descriptions))
                case "backgroundColoredSpace":
                    guard
                        let hexString = response.backgroundHexColor,
                        let color = UIColor(hexString: hexString)
                    else { return }
                    models.append(BackgroundSpaceViewModel(color: color))
                case "image":
                    guard
                        let urlString = response.imageURL,
                        urlString.isURLVerified,
                        let url = URL(string: urlString)
                    else { return }
                    models.append(ImageViewModel(url: url))
                case "unknown":
                    return
                default:
                    return
                }
            }
        }
        return models
    }
}

/*
    /// 1) –ù–∞–¥–æ —Å–æ–∑–¥–∞—Ç—å —Å–≤–æ–∏ ViewModels –ø–æ –ø—Ä–∏–º–µ—Ä—É HeaderViewModel // done
    /// 2) –ü–æ—Å–∫–æ–ª—å–∫—É HeaderViewModel/DetailViewModel/BackgroundSpaceViewModel/ImageViewModel —Ä–∞–∑–Ω—ã–µ, –∞ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å –≤ –º–µ—Ç–æ–¥–µ
    makeScreenItems –Ω–∞–º –Ω–∞–¥–æ —á—Ç–æ-—Ç–æ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞, –Ω–∞–¥–æ –ø–æ–¥—É–º–∞—Ç—å –∫–∞–∫ –∏—Ö –æ–±—ä–µ–¥–∏–Ω–∏—Ç—å, —á—Ç–æ–±—ã —Å–æ—Ö—Ä–∞–Ω—è–ª—Å—è –ø–æ—Ä—è–¥–æ–∫ –∏
    –≤–æ–∑–≤—Ä–∞—â–∞–ª—Å—è –º–∞—Å—Å–∏–≤ [SomeYourType] // done
    /// 3) –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –º–µ—Ç–æ–¥ item(at index: Int) // done
    4) –°–æ–∑–¥–∞—Ç—å –ø—Ä–æ—Ç–æ–∫–æ–ª —Å–æ –≤—Å–µ–º–∏ internal (–Ω–µ –ø—Ä–∏–≤–∞—Ç–Ω—ã–º–∏) –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞–º–∏.
    5) –ü–æ–¥–ø–∏—Å–∞—Ç—å –ø—Ä–æ—Ç–æ–∫–æ–ª –Ω–∞ NewsDataSource, —Å–¥–µ–ª–∞—Ç—å –ø—Ä–æ–ø–µ—Ä—Ç–∏ currentScreenItems - —Ç–æ–ª—å–∫–æ –Ω–∞ —á—Ç–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –ø—Ä–æ—Ç–æ–∫–æ–ª.
    6) –°–æ–∑–¥–∞—Ç—å BeautifulDataSource, –≥–¥–µ –±—É–¥–µ—Ç –∞–±—Å–æ–ª—é—Ç–Ω–æ —Ç–∞–∫–æ–π –∂–µ –∏–Ω–∏—Ç –∏ —Å—Ö–æ–∂–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è
    , –Ω–æ —Å –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–º —Ä–∞–∑–ª–∏—á–∏–µ–º, –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è:

    struct SeparatorViewModel {
        let separatorWidth: CGFloat // –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –º–æ–∂–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤ 300.0
    }

    –í –º–µ—Ç–æ–¥ calculateRandomResponse() –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–¥–æ –¥–æ–±–∞–≤–ª—è—Ç—å, —Å —Å–µ–ø–∞—Ä–∞—Ç–æ—Ä–æ–º —Ä–∞–±–æ—Ç–∞–µ–º —Ç–æ–ª—å–∫–æ, –≥–¥–µ ViewModels

    –°–µ–ø–∞—Ä–∞—Ç–æ—Ä –Ω–∞–¥–æ –≤—Å—Ç–∞–≤–ª—è—Ç—å –º–µ–∂–¥—É currentScreenItems, —Ç–æ –µ—Å—Ç—å,
    –µ—Å–ª–∏ —Ä–∞–Ω—å—à–µ —É –Ω–∞—Å –±—ã–ª [HeaderViewModel, DetailViewModel, BackgroundSpaceViewModel], —Ç–æ —Ç–µ–ø–µ—Ä—å –±—É–¥–µ—Ç
    [HeaderViewModel, SeparatorViewModel, DetailViewModel, SeparatorViewModel, BackgroundSpaceViewModel]

    –ù–∞–¥–æ –ø—Ä–µ–¥—É—Å–º–æ—Ç—Ä–µ—Ç—å:
        - –µ—Å–ª–∏ –±—É–¥–µ—Ç —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω NewsDataResponse, —Å –∫–∞–∫–∏–º-—Ç–æ —Ç–∏–ø–æ–º, —Ç–æ —Å–µ–ø–∞—Ä–∞—Ç–æ—Ä –Ω–µ –Ω—É–∂–µ–Ω.
        - –µ—Å–ª–∏ —ç—Ç–æ –ø–æ—Å–ª–µ–¥–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç, —Ç–æ –∑–∞ –Ω–∏–º –Ω–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å separator.

    P.S. –º–µ—Ç–æ–¥ func item(at index: Int) -> SomeYourType –ø–æ—Ç—Ä–µ–±—É–µ—Ç –≤ BeautifulDataSource –¥–æ—Ä–∞–±–æ—Ç–∫—É,
    –µ—Å–ª–∏ –≤ —Å—Ç–∞—Ä–æ–º NewsDataSource –º—ã —Ç—É–ø–æ –±—Ä–∞–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ –º–∞—Å—Å–∏–≤–∞, —Ç–æ —Ç–µ–ø–µ—Ä—å –º—ã –¥–æ–ª–∂–Ω—ã –±—Ä–∞—Ç—å —Å–ª–µ–¥—É—é—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ —ç–ª–µ–º–µ–Ω—Ç–∞.
    –ù–∞–ø—Ä–∏–º–µ—Ä –¥–ª—è –º–∞—Å—Å–∏–≤–∞ [HeaderViewModel, SeparatorViewModel, DetailViewModel, SeparatorViewModel, BackgroundSpaceViewModel],
    –µ—Å–ª–∏ –º—ã –≤–æ–∑—å–º—ë–º —ç–ª–µ–º–µ–Ω—Ç –ø–æ–¥ –∏–Ω–¥–µ–∫—Å–æ–º 3, —Ç–æ —É –Ω–∞—Å –ø–æ–ø–∞–¥—ë—Ç –Ω–∞ SeparatorViewModel => –Ω–∞–¥–æ –≤–∑—è—Ç—å —Å–ª–µ–¥—É—é—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –æ—Ç –Ω–µ–≥–æ, —Ç–æ –µ—Å—Ç—å
    BackgroundSpaceViewModel


    –ó–∞–¥–∞–Ω–∏–µ —Å–æ *
    - –ù–∞–ø–∏—Å–∞—Ç—å init –≤ extension –Ω–∞ UIColor, —á—Ç–æ–±—ã –±—ã–ª –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ç–æ—Ä UIColor(hexString: String) // done
    - –ö–∞–∂–¥—ã–π —Å–ª–µ–¥—É—é—â–∏–π separator –≤ BeautifulDataSource —É–≤–µ–ª–∏—á–∏–≤–∞—Ç—å width –Ω–∞ 10 % (–Ω–∞—á–∏–Ω–∞—è —Å 300.0).


    –ü–æ –∏—Ç–æ–≥—É –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –¥–≤–∞ –∫–ª–∞—Å—Å–∞ —Å —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–º —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–æ–º –ø–æ –ø—Ä–∞–≤–∏–ª–∞–º –≤—ã—à–µ. –û–¥–∏–Ω –æ–±—â–∏–π –ø—Ä–æ—Ç–æ–∫–æ–ª.
    –£ –∫–æ—Ç–æ—Ä—ã—Ö –º–æ–∂–Ω–æ –±—É–¥–µ—Ç –≤—ã–∑—ã–≤–∞—Ç—å refreshScreenItems().
 */


/// –≠—Ç–æ—Ç –º–µ—Ç–æ–¥ —Ç—Ä–æ–≥–∞—Ç—å –Ω–µ–ª—å–∑—è, –æ–Ω —Å–∏–º—É–ª–∏—Ä—É–µ—Ç –∑–∞–≥—Ä—É–∑–∫—É –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∑–∞–¥–∞–Ω–∏—è
private func calculateRandomResponse() -> [NewsDataResponse] {

    let header = NewsDataResponse(
        type: "header",
        header: "–ù–µ–ª—å–∑—è —Å–ª–∏–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ —Å –•—É—Ä–∞–ª–∞",
        imageURL: nil,
        title: nil,
        backgroundHexColor: nil,
        descriptions: []
    )

    let detail = NewsDataResponse(
        type: "detail",
        header: nil,
        imageURL: nil,
        title: "–ß—Ç–æ –±—ã–ª–æ –Ω–∞ —Ö—É—Ä–∞–ª–µ –∑–∞ 26.02.98",
        backgroundHexColor: nil,
        descriptions: ["–†–∞—Å—Å–∫–∞–∑–∞–ª–∏ –ø—Ä–æ —Ç–æ, —á—Ç–æ –º—ã –∫—Ä—É—Ç—ã–µ.", "–£–±—Ä–∞–ª–∏ –∫–æ–ø–µ–π–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –¥–æ–±–∞–≤–∏–ª–∏.", "–ú–µ—Ç—Ä–∏–∫–∏ –†–æ—Å—Ç–∞."]
    )

    let backgroundColoredSpace = NewsDataResponse(
        type: "backgroundColoredSpace",
        header: nil,
        imageURL: nil,
        title: nil,
        backgroundHexColor: "#fcba03",
        descriptions: []
    )

    let image = NewsDataResponse(
        type: "image",
        header: nil,
        imageURL: "www.yandex.ru",
        title: nil,
        backgroundHexColor: nil,
        descriptions: []
    )

    let badImage = NewsDataResponse(
        type: "image",
        header: nil,
        imageURL: "KEK KEK KEK",
        title: nil,
        backgroundHexColor: nil,
        descriptions: []
    )

    let badType = NewsDataResponse(
        type: "unknown",
        header: nil,
        imageURL: "KEK KEK KEK",
        title: nil,
        backgroundHexColor: nil,
        descriptions: []
    )

    let detailSecond = NewsDataResponse(
        type: "detail",
        header: nil,
        imageURL: nil,
        title: "–ß—Ç–æ –±—ã–ª–æ –Ω–∞ –¥–∏—Å–∫–∞—à–µ–Ω–µ –≤ iOS –∫–æ–º–∞–Ω–¥–µ",
        backgroundHexColor: nil,
        descriptions: ["–†–∞—Å—Å–∫–∞–∑–∞–ª–∏ –ø—Ä–æ —Ç–æ, —á—Ç–æ –º—ã –∫—Ä—É—Ç—ã–µ.", "–£–±—Ä–∞–ª–∏ –∫–æ–ø–µ–π–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –¥–æ–±–∞–≤–∏–ª–∏.", "–ú–µ—Ç—Ä–∏–∫–∏ –†–æ—Å—Ç–∞."]
    )

    let backgroundColoredSpaceSecond = NewsDataResponse(
        type: "backgroundColoredSpace",
        header: nil,
        imageURL: nil,
        title: nil,
        backgroundHexColor: "#fcba03",
        descriptions: []
    )

    let imageSecond = NewsDataResponse(
        type: "image",
        header: nil,
        imageURL: "www.yandex.ru",
        title: nil,
        backgroundHexColor: nil,
        descriptions: []
    )

    let badImageSecond = NewsDataResponse(
        type: "image",
        header: nil,
        imageURL: "KEK KEK KEK",
        title: nil,
        backgroundHexColor: nil,
        descriptions: []
    )

    let exampleFullArray = [
        header,
        detail,
        backgroundColoredSpace,
        image,
        badImage,
        badType,
        detailSecond,
        backgroundColoredSpaceSecond,
        imageSecond,
        badImageSecond
    ]

    let randomCount = Int(arc4random_uniform(UInt32(exampleFullArray.count - 1)))
    return exampleFullArray.shuffled().dropLast(randomCount)
}

